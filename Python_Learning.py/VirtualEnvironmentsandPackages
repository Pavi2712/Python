Why Virtual Environment?
  If application A needs version 1.0 of a particular module but application B needs version 2.0,then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.

  The solution for this problem is to create a virtual environment, a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages.

How to create virtual Environment?
  The module used to create and manage virtual environments is called venv.
  To create the virtual environment , decide upon a directory where you want to place it, then run the venv module  as a script with the directory path.

  python -m venv tutorial-env # -m is the module , venv module is used to create the virtual environment , where tutorial-env is the virtual environment name.

  The above comment will create the directory with the name tutorial-env and inside it containing a copy of the Python interpreter and various supporting files.

After installing what we have to do?
1.Once you’ve created a virtual environment, you may activate it.
On Windows, run:
tutorial-env\Scripts\activate
Example: .\myenv\Scripts\Activate

2.On Unix or MacOS, run:
source tutorial-env/bin/activate

3.Activating the virtual environment will change your shell’s prompt to show what virtual environment you’re using, and modify the environment so that running python will get you that particular version and installation of Python.

4.Type Python to open the python script.
5.Use exit() to get exite from the python script.
6.Use deactivate to deactivate the environment.

Managing Packages with pip:
1.You can install, upgrade, and remove packages using a program called pip.By default pip will install packages from the Python Package Index.
2.pip has a number of subcommands: “install”, “uninstall”, “freeze”, etc

We can install the latest version of a package by specifying a package’s name:
1.python -m pip install requests==2.6.0 #If we want some specific version of that package to be installed then we mention the version after ==

upgrade the version alone by the below syntax:
1.python -m pip install --upgrade requests

uninstall the installed package by the following syntax:
1.python -m pip uninstall requests 
Ask Yes or No to proceed. If yes then the package will be removed

See the information of the particular package by using show
1.python -m pip show requests

Display all of the packages installed in the virtual environment:
python -m pip list

Produce a similar list of the installed packages:
1.python -m pip freeze > requirements.txt # will freeze and store the packages in the name requirements.txt
2.To view the packages we use cat requirements.txt
3.To install that in other systems we simple use the name requirements.txt and run the below command:
python -m pip install -r requirements.txt







