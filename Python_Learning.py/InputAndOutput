-->So far we’ve encountered two ways of writing values: expression statements and the print() function.
-->A third way is using the write() method of file objects; 
There are several ways to format output:
1.Formatting string literals:
    Begin a string with f or F before the opening quotation mark. Inside this string, you can write a Python expression between { and } characters that can refer to variables or literal values.
2.str.Format():
The str.format() method of strings requires more manual effort. You’ll still use { and } to mark where a variable will be substituted and can provide detailed formatting directives, but you’ll also need to provide the information to be formatted.

Important: ---> When you don’t need fancy output but just want a quick display of some variables for debugging purposes, you can convert any value to a string with the repr() or str() functions.
The str()--->function is meant to return representations of values which are fairly human-readable. repr()---> is meant to generate representations which can be read by the interpreter (or will force a SyntaxError if there is no equivalent syntax). 

--->Formatted String Literals:
    Passing an integer after the ':' will cause that field to be a minimum number of characters wide. This is useful for making columns line up.

    -->math.pi:3f rounds pi to three places after the decimal
    -->print(f'{name:10} ==> {phone:10d}') -> 10 will move the space at right side where as 10d will move the space atleft side.

Other modifiers can be used to convert the value before it is formatted. '!a' applies ascii(), '!s' applies str(), and '!r' applies repr():
!s --> User-readable
!r --> Debug/developer-readable
!a --> ASCII-safe representation 

The = specifier can be used to expand an expression to the text of the expression, an equal sign, then the representation of the evaluated expression.

-->The String format() Method:
1.Directly we can assign the value inside the format method.
2.We can mention the position also inside the brackets.
3.We can also use keyword arguments inside the format method and call them inside brackets.
4.We can combine position as well as keyword argument also.
5.We can access the value from dictionary also using the format index[key]:d
6.We can also pass dictionary as keyword argument since accessing is easy. Meaning ** syntax unpacks the dictionary into named keyword arguments.

str.zfill() --> which pads a numeric string on the left with zeros.

-->Reading and Writing Files:
open() returns a file object, and is most commonly used with two positional arguments and one keyword argument.
Syntax: open(filename, mode, encoding=None)
Normally, files are opened in text mode, that means, you read and write strings from and to the file, which are encoded in a specific encoding.
-->UTF-8 is the modern de-facto standard, encoding="utf-8" is recommended unless you know that you need to use a different encoding.

Different modes: It is optional
r - read 
w - write
a - append
r+ - Both read and write
b - binary 

Binary mode - Binary mode data is read and written as bytes objects. You can not specify encoding when opening file in binary mode.

It is good practice to use the with keyword when dealing with file objects. The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point. Using with is also much shorter than writing equivalent try-finally blocks.

Example:
with open('workfile', encoding='utf-8')as f:
read_data = f.read()
f.closed # It will result true since we have used with keyword.If we are not using with keyword then we need to use f.close() to close the file. After closing the file we cant access it. It automatically gets failed.

Calling f.write() without using the with keyword or calling f.close() might result in the arguments of f.write() not being completely written to the disk, even if the program exits successfully.

Methods of File Objects:
-->To read a file’s contents, call f.read(size), which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode).
-->Anyway, size is the optional. When it is omitted or negative then all the contents are read from the file. This may result in machines memory storage. If the end of the file is reached then it will return the empty string.

-->f.readline() reads a single line from the file;

1.For reading lines from a file, you can loop over the file object.
for example:
for line in f:
    print(line , end='')

2.For reading all the lines of a file in a list you can also use list(f) or f.readlines()

3.f.write(string) writes the contents of string to the file, returning the number of characters written

Before writing something into the file it should be converted to string or binary.

f.tell() returns an integer giving the file object’s current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode. It is used to track the position.

f.seek() used to change the file points position. 
Syntax:
file.seek(offset, whence=0)
offset --> number of bytes should be moved.
whence --> It basically have 3 inputs as below,
0(default) --> It is the start of the position
1 --> Current Postion
2 --> End Position 

Saving structured data with json:

The standard module called json can take Python data hierarchies, and convert them to string representations; this process is called serializing.

Reconstructing the data from the string representation is called deserializing. 
Syntax:
json.dumps()








