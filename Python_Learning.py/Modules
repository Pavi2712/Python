Modules:
-->If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost or We have to create the script.As your program gets longer, you may want to split it into several files for easier maintenance. 
-->To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module.
-->This modules can be imported in other modules also.
-->Module may contain statements , function , class and so on. The file which is saved with .py is known as module.
-->Within a module, the module’s name (as a string) is available as the value of the global variable __name__.

To use in other module import the module,
Using below syntax:
import modulename

-->This does not add the names of the functions defined in fibo directly to the current namespace. It only adds the module name fibo there.

More on Modules:
Each module has its own private namespace, which is used as the global namespace by all functions defined in the module.Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. 

Different ways of importing module:
1.from fibo import fib, fib2 #We are importing the specific function from the module fibo.
2.from fibo import * #This imports all the names from the module fibo except(_).In most cases Python programmers do not use this (_) facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.
3.import fibo as fib # This is alias name given as fib for the module fibo.


Executing modules as scripts:
We can run the python file by Python file name, also we can pass the arguments.
Syntax:
python module.py <arguments>
Example: 
python fibo.py 50 # Here 50 is the arguments given to the python file.
0 1 1 2 3 5 8 13 21 34

The Module Search Path:
Once the module is imported , the interpreter first searched for a
1.built-in module with that name.This built in modules are listed in sys.builtin_module_names.
2.Secondly, it will search in the list of directories given by the variable sys.path.
  sys.path will get initialized from the below location:
    1.Current path
    2.Python Path
    3.Installation-dependent default (site packages)

“Compiled” Python files:
--> To speed up loading modules, Python caches the compiled version of each module in the __pycache__ directory under the name module.version.pyc, where the version encodes the format of the compiled file; it generally contains the Python version number.This naming convention allows compiled modules from different releases and different versions of Python to coexist.

Python checks the modification date of the source against the compiled version to see if it’s out of date and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are platform-independent, so the same library can be shared among systems with different architectures.

Python does not check the cache in two circumstances:
1.First, it always recompiles and does not store the result for the module that’s loaded directly from the command line. Second, it does not check the cache if there is no source module. To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module.

Tips:
You can use the -O or -OO switches on the Python command to reduce the size of a compiled module. 
-O will remove the assert statements.
-OO switch removes both assert statements and __doc__ strings.

A program doesn’t run any faster when it is read from a .pyc file than when it is read from a .py file; the only thing that’s faster about .pyc files is the speed with which they are loaded.==> running time same but only the loading time is different.

The module compileall can create .pyc files for all modules in a directory.

Standard Modules:
Python comes with a library of standard modules, described in a separate document, the Python Library Reference (“Library Reference”). 

The dir() Function:
-->The built-in function dir() is used to find out which names a module defines. 
-->dir() does not list the names of built-in functions and variables. If you want a list of those, they are defined in the standard module builtins:



