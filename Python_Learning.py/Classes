Classes:
1.Classes provide a means of bundling data and functionality together
==> Classes act as blueprint,which group the related data and functions into a single , organized unit.

2.Creating a new class creates a new type of object, allowing new instances of that type to be made ==> defining a new class creates a blueprint or template for a new type of object, and that blueprint allows you to create multiple individual objects (instances) based on that blueprint. 

3.Each class instance can have attributes attached to it for maintaining its state
==> each object (or "instance") created from a class can have its own set of data, called attributes, which store information about that specific object's state or properties. 

4.Class instances can also have methods (defined by its class) for modifying its state
==> Each object of a class can have a function defined by the class that can be used to change that objects attribute.

5.Python’s class mechanism adds classes with a minimum of new syntax and semantics
==> Python's implementation is designed to be simple and understandable with minimal new features(Syntax) and concepts that is behaviour (Sematics)

6.Modula-3 ==> It is a ALGOL like language meaning Algorithmic language. It was designed for scientific and engineering computations.

Python classes provide all the standard features of Object Oriented Programming:
      1.The class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name.

Objects can contain arbitrary amounts and kinds of data,As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.
==> flexible container that can hold any type of data and quantity of information.Since it is true for modules and also Python is a dynamically typed language(the type is not checked until runtime)After an object is created, you can add new attributes (data) to it, change the values of its attributes, or even add new methods (functions) to it, all during the program's execution. 

In C++ terminology, normally class members (refer to the variables (data members) and functions (methods) defined within a class that determine the properties and behavior of objects created from that class. ) (including the data members) are public, and all member functions are virtual.


A Word About Names and Objects:
What is mean by aliasing?

Objects have individuality, and multiple names (in multiple scopes) can be bound to the same object
==>Each object in a programming language has a unique identity, and multiple variables (names) can point to or refer to the same object, even if those variables are in different parts of the code (different scopes). 

This is not a best practice, but also useful since aliases behave like pointers in some respects.

For Example:
For example, passing an object is cheap since only a pointer is passed by the implementation; and if a function modifies an object passed as an argument, the caller will see the change — this eliminates the need for two different argument passing mechanisms as in Pascal.

Python Scopes and Namespaces:
Class definitions play some neat tricks with namespaces likewise scopes and namespaces also have some tricks.Let us know that below:

Namespace:
==>A namespace is a mapping from names to objects --> Meaning it is a container which will store the names of the object and functions.
==>Example of Namespace are: It may be the built in , global , local , or object namespace.
==>In a sense the set of attributes of an object also form a namespace.
==>The important thing to know about namespaces is that there is absolutely no relation between names in different namespaces;
==>Namespaces are created at different moments and have different lifetimes. 
==>The namespace containing the built-in names is created when the Python interpreter starts up, and is never deleted.
==>The statements executed by the top-level invocation of the interpreter, either read from a script file or interactively, are considered part of a module called __main__, so they have their own global namespace. (The built-in names actually also live in a module; this is called builtins.)


For Example: Human and Animals are different namespace, may have the same name but has no relation.

Module attributes are writable: you can write modname.the_answer = 42. Writable attributes may also be deleted with the del statement. For example, del modname.the_answer will remove the attribute the_answer from the object named by modname.

A First Look at Classes:
-->Class Definition Syntax:
    class ClassName:
        <statement-1>
        <statement-N>

-->The function definitions inside a class normally have a peculiar(... , *args) form of argument list, dictated by the calling conventions for methods.
-->When a class definition is entered, a new namespace is created, and used as the local scope — thus, all assignments to local variables go into this new namespace. In particular, function definitions bind the name of the new function here.

Class Objects:
data attributes correspond to “instance variables”
 Data attributes need not be declared; like local variables, they spring into existence when they are first assigned to.
Class objects support two kinds of operations: attribute references and instantiation.
Attribute references use the standard syntax used for all attribute references in Python: obj.name.
Example:
class MyClass:
    """A simple example class"""
    i = 12345

    def f(self):
        return 'hello world'

-->MyClass.i and MyClass.f are valid attribute references

Class instantiation uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class.
x = MyClass()

Instance Objects:
There are two kinds of valid attribute names: data attributes and methods.
data attributes correspond to “instance variables”
Data attributes need not be declared; like local variables, they spring into existence when they are first assigned to.

Method Objects:
 Methid Object is nothing but we can able to access the method / function using its oject.
 Example:
 class Hello:
    def f(self):
        return "Hello World"
Y = Hello()
z = Y.f()
print(z)

The call x.f() is exactly equivalent to MyClass.f(x).

Class and Instance Variables:

Instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class.

Difference between Method object and Function Object:
class MyClass:
    def f(self):
        print("This is method f.")

    i = 42  # Class attribute

# Create an instance of MyClass
x = MyClass()

x.f # It is a method object
MyClass.f(x) # It is a function object

Random Remarks:
If the same attribute name occurs in both an instance and in a class, then attribute lookup prioritizes the instance.

The object properties are called data attributes of the object.

Inheritance:
    syntax:
    class DerivedClassName(BaseClassName):
    <statement - 1>
    <statement - N>

--> The name BaseClassName must be defined in a namespace accessible from the scope containing the derived class definition.
--> In the place of BaseClassName other arbitary expressions is also allowed.This can be useful, for example, when the base class is defined in another module:
class DerivedClassName(modname.BaseClassName): #Here we are using the base class from different module.

Execution of derived class depends on the base class , It will resolve attribute reference.This rule is applied recursively if the base class itself is derived from some other class.

Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function object.

Derived classes can override the methoods of the base class.
A method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it.--> if the changes done in derived class and the same method that in base class then derived class value overrides the base class.

Python has two built-in functions that work with inheritance:
isinstance(object, classinfo)
Return True if the object argument is an instance of the classinfo argument, or of a (direct, indirect, or virtual) subclass thereof.
issubclass(class, classinfo)
Return True if class is a subclass (direct, indirect, or virtual) of classinfo. A class is considered a subclass of itself.

Multiple Inheritance:
Class Inheritance with multiple base class:
    class DerivedClassName(Base1, Base2, Base3):
    <statement - 1>
    <statement - N>
--> The search for attributes inherited from a parent class as depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy.Thus, if an attribute is not found in DerivedClassName, it is searched for in Base1, then (recursively) in the base classes of Base1, and if it was not found there, it was searched for in Base2, and so on.

-->The method resolution order changes dynamically to support cooperative calls to super().

super(base1,base2)
Syntax:
It follows left to right ordering.
super().method_name() ==>super class refers to the next class in hiracy and the method is what searching for in parent class by the given order of base class.

 diamond relationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class).

 monotonic (meaning that a class can be subclassed without affecting the precedence order of its parents).

Private Variables: 
  Python does not support to have private variables directlt. Since we are using mangling techniques to make the attributes as private.

  It is nothing but mentioning the double underscrore infront of the attribute.
  
  Mangling works in two ways:
  1.Double underscore (__): When you define an attribute with two leading underscores, Python automatically changes the name of the attribute by adding a _ClassName prefix to it.
  2.Single Leading Underscore (_): A single leading underscore is a convention indicating that an attribute is intended for internal use and should not be accessed directly, but it is not subject to name mangling.

  We can able to access the Mangling that is private variables by two types:
  1.By public method, dirctly accessing the method
  2.By _classname

Odds and Ends:
Since python as dynamic language we dont use data types. If we want to use then we can import the built-in dataclasses.

Iterators:
Basically, the iterations are done by for loop. Instead we can also use iter() in the container object, which calls the next() methid for next iteration and once the index position is completed stop the execution by raising StopIteration.

Generators:
Generators are a simple and powerful tool for creating iterators.

They are written like regular functions but use the yield statement whenever they want to return data. Each time next() is called on it, the generator resumes where it left off (it remembers all the data values and which statement was last executed). 

What makes generators so compact is that the __iter__() and __next__() methods are created automatically.
Another key feature is that the local variables and execution state are automatically saved between calls. 

when generators terminate, they automatically raise StopIteration. 








